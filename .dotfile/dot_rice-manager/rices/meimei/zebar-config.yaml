# Yaml is white-space sensitive (use 2 spaces to indent).

###
# Settings to apply to all windows.
#
# Docs regarding global: https://some-future-docs-link.com
global:
  # Whether to enable the browser devtools.
  enable_devtools: false

###
# Define a new window with an id of 'bar'. This window can then be opened
# via the Zebar cli by running 'zebar open bar'.
#
# Docs regarding window: https://some-future-docs-link.com
window/bar:
  providers: ["self"]
  # Width of the window in physical pixels.
  width: "{{ self.args.MONITOR_WIDTH - 24 }}"
  # Height of the window in physical pixels.
  height: "42"
  # X-position of the window in physical pixels.
  position_x: "{{ self.args.MONITOR_X + 12 }}"
  # Y-position of the window in physical pixels.
  position_y: "{{ self.args.MONITOR_Y + 12 }}"
  # Whether to show the window above/below all others.
  # Allowed values: 'always_on_top', 'always_on_bottom', 'normal'.
  z_order: "always_on_bottom"
  # Whether the window should be shown in the taskbar.
  show_in_taskbar: false
  # Whether the window should have resize handles.
  resizable: false
  # Styles to apply globally within the window. For example, we can use
  # this to import the Nerdfonts icon font. Ref https://www.nerdfonts.com/cheat-sheet
  # for a cheatsheet of available Nerdfonts icons.
  # global_styles: |
  # @import "https://www.nerdfonts.com/assets/css/webfont.css";
  # CSS/SCSS styles to apply to the root element within the window.
  styles: |
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    align-items: center;
    height: 100%;
    color: #EBDBB2;
    font-family: Pixelcraft Nerd Font;
    font-size: 13.5pt;
    padding: 0px 24px 3px;
    border-bottom: 1px solid #ffffff08;
    background: #1D2021CC;
  group/left:
    styles: |
      display: flex;
      align-items: center;

    template/logo:
      styles: |
        margin-right: 20px;

        .os {
          color: #FFC130;
        }
      template: |
        <div class='os'>☠</div>

    template/host:
      providers:
        - type: 'host'
          refresh_interval: 60000
      template: |
        <span>{{host.hostname}}</span>
        <span>-</span>
        <span>{{`Uptime ${Math.floor(host.uptime / 3600000)} hours and ${Math.floor((host.uptime % 3600000) / 60000)} minutes`}}</span>


  group/center:
    styles: |
      justify-self: center;

    template/workspaces:
      styles: |
        display: flex;
        align-items: center;

        .workspace {
          background: rgba(255, 255, 255, 0.00);

          margin-right: 4px;
          padding-bottom: 5px;
          color: #EBDBB2;
          border: none;
          border-radius: 2px;
          width: 32px;
          font-size: 20px;
          opacity: 30%;
        }

        .have-windows {
          font-size: 20px;
          opacity: 100%;
        }

        .active {
          font-size: 20px;
          color: #FFC130;
          opacity: 100%;
        }
      providers: ["komorebi"]
      template: |
        @for (workspace of komorebi.currentWorkspaces) {
          <button class="workspace {{ workspace.tilingContainers.length && 'have-windows ' }} - {{ workspace === komorebi.focusedWorkspace && 'active ' }}">
            {{ workspace === komorebi.focusedWorkspace ? '⭐' : '●' }}
          </button>
        }

  group/right:
    styles: |
      justify-self: end;
      align-items: center;
      display: flex;

      .template {
        margin-left: 24px;
      }

    template/cpu:
      providers:
        - type: 'cpu'
          refresh_interval: 1000
      styles: |
        .cpu {
          color: #fb4934;
        }
      template: |
        <span class='cpu'>❤ </span><span>{{ Math.round(cpu.usage) }}%</span>

    template/memory:
      providers:
        - type: 'memory'
          refresh_interval: 1000
      styles: |
        display: flex;
        align-items: center;
        gap: 12px;

        .memory {
          padding-bottom: 2px;
          color: #b8bb26;
        }
      template: |
        <div class='memory'>✂</div>
        {{ ((usedBytes, totalBytes) => {
            return `${(usedBytes / (1024 * 1024 * 1024)).toFixed(2).toLocaleString() + ' GiB'}`;
        })(memory.usedMemory, memory.totalMemory) }}

    template/battery:
      providers: ["battery"]
      styles: |
        position: relative;
        display: flex;
        align-items: center;
        gap: 8px;

        .battery {
          padding-top: 4px;
          font-size: 17pt;
          color: #fabd2f;
        }

        .low-battery {
          color: #FF4A35;
        }

        .charging-icon {
          color: #83A598;
          position: absolute;
          font-size: 15pt;
          left: 7px;
          bottom: 0px;
          filter:
            drop-shadow( 1px  0px 0px #1d1f21)
            drop-shadow(-1px  0px 0px #1d1f21)
            drop-shadow( 0px  1px 0px #1d1f21)
            drop-shadow( 0px -1px 0px #1d1f21);
        }

        .full {
          color: #b8bb26;
          font-size: 11pt;
          left: 8px;
          bottom: 4px;
        }
      template: |
        <!-- Show icon for whether battery is charging. -->
        @if (battery.state === 'charging') {<div class="charging-icon">⚡</div>}
        @else if (battery.state === 'full') {<div class="charging-icon full">✔</div>}

        <!-- Show icon for how much of the battery is charged. -->
        @if (battery.chargePercent > 94) {<div class='battery'> </div>}
        @else if (battery.chargePercent > 80) {<div class='battery'> </div>}
        @else if (battery.chargePercent > 70) {<div class='battery'> </div>}
        @else if (battery.chargePercent > 60) {<div class='battery'> </div>}
        @else if (battery.chargePercent > 50) {<div class='battery'> </div>}
        @else if (battery.chargePercent > 30) {<div class='battery'> </div>}
        @else if (battery.chargePercent > 20) {<div class='battery'> </div>}
        @else {<div class='battery'> </div>}

        {{ Math.round(battery.chargePercent) }}%

    template/weather:
      providers: ["weather"]
      styles: |
        .clear-day {
          color: #fabd2f;
        }
        .cloudy-day {
          color: #8EC07C;
        }
        .rainy-day {
          color: #83A598;
        }
      template: |
        @switch (weather.status) {
          @case ('clear_day') {<span class='clear-day'>☀ </span>}
          @case ('clear_night') {<span class='clear-day'>☽ </span>}
          @case ('cloudy_day') {<span class='cloudy-day'>☁ </span>}
          @case ('cloudy_night') {<span class='cloudy-day'>☁ </span>}
          @case ('light_rain_day') {<span class='rainy-day'>☂ </span>}
          @case ('light_rain_night') {<span class='rainy-day'>☂ </span>}
          @case ('heavy_rain_day') {<span class='rainy-day'>☔ </span>}
          @case ('heavy_rain_night') {<span class='rainy-day'>☔ </span>}
          @case ('snow_day') {<span class='cloudy-day'>☃ </span>}
          @case ('snow_night') {<span class='cloudy-day'>☃ </span>}
          @case ('thunder_day') {<span class='rainy-day'>⛈ </span>}
          @case ('thunder_night') {<span class='rainy-day'>⛈ </span>}
        }
        {{ weather.celsiusTemp }}°c

    template/clock:
      providers: ["date"]
      # Available date tokens: https://moment.github.io/luxon/#/formatting?id=table-of-tokens
      styles: |
        .clock {
          color: #D3869B;
        }
      template: |
        <span class='clock'>⌚ </span>{{ date.toFormat(date.now, 't, EEEE, d MMM y') }}
